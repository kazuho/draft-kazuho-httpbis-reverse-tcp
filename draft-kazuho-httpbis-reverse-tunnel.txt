



httpbis                                                           K. Oku
Internet-Draft                                                    Fastly
Intended status: Standards Track                         9 February 2024
Expires: 12 August 2024


                        Reverse Tunnel over HTTP
               draft-kazuho-httpbis-reverse-tunnel-latest

Abstract

   This document specifies the protocol for setting up bi-directional
   byte streams from application servers to their clients by using HTTP
   as a tunnel.

Discussion Venues

   This note is to be removed before publishing as an RFC.

   Discussion of this document takes place on the HTTP Working Group
   mailing list (ietf-http-wg@w3.org), which is archived at
   https://lists.w3.org/Archives/Public/ietf-http-wg/.

   Source for this draft and an issue tracker can be found at
   https://github.com/kazuho/draft-kazuho-httpbis-reverse-tcp.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 12 August 2024.

Copyright Notice

   Copyright (c) 2024 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction
   2.  Conventions and Definitions
   3.  The Protocol
     3.1.  HTTP/1.1
     3.2.  HTTP/2 and HTTP/3
   4.  Authentication
   5.  Forwarding Client Address
   6.  Protocol Negotiation
   7.  IANA Considerations
   8.  References
     8.1.  Normative References
     8.2.  Informative References
   Acknowledgments
   Author's Address

1.  Introduction

   In typical application protocols operating on top of TCP, clients
   initiate TCP connections by specifying the server's IP address and
   the port number.  However, not all servers can accept incoming TCP
   connections directly.

   Presently, servers situated behind firewalls that block incoming TCP
   connections often rely on virtual private networks (VPNs).  These
   VPNs enable the passage of packets initiating TCP connections to
   servers through encapsulation, effectively bypassing firewall
   restrictions.  This approach, however, compromises network
   manageability and incurs performance penalties due to the additional
   routing and encapsulation involved.

   This document proposes an alternative method.

   Instead of utilizing VPNs, it describes how servers establish
   connections to clients over HTTP to create bi-directional byte
   streams for applications to exchange information.  Specifically, this
   protocol leverages HTTP upgrades in HTTP/1.1 ([HTTP-SEMANTICS]
   Section 7.8) or the "extended CONNECT" method of HTTP/2
   ([EXTENDED-CONNECT-H2]) and HTTP/3 ([EXTENDED-CONNECT-H3]) to
   establish connections.

   Employing HTTP for connection establishment offers additional
   benefits.  Beyond TLS-based authentication schemes, servers can
   authenticate themselves using varios HTTP-provided authentication
   schemes, such as HTTP authentication and cookies.  Furthermore,
   clients are identified by URI rather than by IP address and port
   number, enhancing flexibility and integration with web technologies.

   As servers specify their clients using URIs, only clients known to a
   server can communicate directly with it.  However, clients can act as
   relays, forwarding TCP connections from the Internet to the servers
   connected through the reverse tunnel.

2.  Conventions and Definitions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

3.  The Protocol

   To setup the bi-directional byte streams, servers connect to the
   clients as specified by the URI, and issues an HTTP request to
   establish a tunnel.

   To signal the intent to establish a reverse tunnel, an upgrade token
   named "reverse" is used.

   The method and the conveyor of the upgrade token are different
   between the HTTP versions.

3.1.  HTTP/1.1

   In HTTP/1.1, method of the issued request SHALL be "GET" and the
   upgrade token SHALL be conveyed by the "Upgrade" header field.

   As an upgrade is initiated, the "Connection" header specifies the
   "Upgrade" option ([HTTP-SEMANTICS] Section 7.8).

   Once the reverse tunnel is established successfuly, the client
   responds with a 101 (Swithing Protocols) response.

3.2.  HTTP/2 and HTTP/3

   In HTTP/2 and HTTP/3, extended CONNECT is used ([EXTENDED-CONNECT-H2]
   or [EXTENDED-CONNECT-H3]).

   In either version of HTTP, the method being used is "CONNECT" and the
   upgrade token is conveyed by the ":protocol" pseudo header.

   Once the reverse tunnel is established successfully, the client
   responds with a 200 (OK) response.

4.  Authentication

   When HTTPS is used for establishing the tunnel, the client (i.e., the
   node acting as the TLS server) SHOULD use one of the TLS-based
   authentication schemes to identify itself.

   The server SHOULD authenticate itself either by using one of the
   HTTP-based authentication schemes (e.g., HTTP Basic Authentication
   [BASIC-AUTH]) or by using one of the TLS-based authentication schemes
   when HTTPS is used.

5.  Forwarding Client Address

   When the client is acting as a TCP relay, it MAY include the
   "Forwarded" header field [FORWARDED] in the HTTP response it sends,
   to indicate the client identity of the relayed connection.

6.  Protocol Negotiation

   TBD

7.  IANA Considerations

   This document has no IANA actions.

8.  References

8.1.  Normative References

   [EXTENDED-CONNECT-H2]
              McManus, P., "Bootstrapping WebSockets with HTTP/2",
              RFC 8441, DOI 10.17487/RFC8441, September 2018,
              <https://www.rfc-editor.org/rfc/rfc8441>.

   [EXTENDED-CONNECT-H3]
              Hamilton, R., "Bootstrapping WebSockets with HTTP/3",
              RFC 9220, DOI 10.17487/RFC9220, June 2022,
              <https://www.rfc-editor.org/rfc/rfc9220>.

   [FORWARDED]
              Petersson, A. and M. Nilsson, "Forwarded HTTP Extension",
              RFC 7239, DOI 10.17487/RFC7239, June 2014,
              <https://www.rfc-editor.org/rfc/rfc7239>.

   [HTTP-SEMANTICS]
              Fielding, R., Ed., Nottingham, M., Ed., and J. Reschke,
              Ed., "HTTP Semantics", STD 97, RFC 9110,
              DOI 10.17487/RFC9110, June 2022,
              <https://www.rfc-editor.org/rfc/rfc9110>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

8.2.  Informative References

   [BASIC-AUTH]
              Reschke, J., "The 'Basic' HTTP Authentication Scheme",
              RFC 7617, DOI 10.17487/RFC7617, September 2015,
              <https://www.rfc-editor.org/rfc/rfc7617>.

Acknowledgments

   TODO acknowledge.

Author's Address

   Kazuho Oku
   Fastly
   Email: kazuhooku@gmail.com
